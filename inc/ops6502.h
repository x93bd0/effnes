#ifndef OPS6502_H
#define OPS6502_H
#include <stdint.h>

/*
  Official Opcodes
  Source: http://www.6502.org/tutorials/6502opcodes.html
*/

#define OP_ADC 0x1
#define OP_AND 0x2
#define OP_ASL 0x3
#define OP_BCC 0x4
#define OP_BCS 0x5
#define OP_BEQ 0x6
#define OP_BIT 0x7
#define OP_BMI 0x8
#define OP_BNE 0x9
#define OP_BPL 0xA
#define OP_BRK 0xB
#define OP_BVC 0xC
#define OP_BVS 0xD
#define OP_CLC 0xE
#define OP_CLD 0xF
#define OP_CLI 0x10
#define OP_CLV 0x11
#define OP_CMP 0x12
#define OP_CPX 0x13
#define OP_CPY 0x14
#define OP_DCP 0x3B
#define OP_DEC 0x15
#define OP_DEX 0x16
#define OP_DEY 0x17
#define OP_EOR 0x18
#define OP_INC 0x19
#define OP_INX 0x1A
#define OP_INY 0x1B
#define OP_ISC 0x3C
#define OP_JMP 0x1C
#define OP_JSR 0x1D
#define OP_LAX 0x39
#define OP_LDA 0x1E
#define OP_LDX 0x1F
#define OP_LDY 0x20
#define OP_LSR 0x21
#define OP_NOP 0x22
#define OP_ORA 0x23
#define OP_PHA 0x24
#define OP_PHP 0x25
#define OP_PLA 0x26
#define OP_PLP 0x27
#define OP_RLA 0x0
#define OP_ROL 0x28
#define OP_ROR 0x29
#define OP_RRA 0x3F
#define OP_RTI 0x2A
#define OP_RTS 0x2B
#define OP_SAX 0x3A
#define OP_SBC 0x2C
#define OP_SEC 0x2D
#define OP_SED 0x2E
#define OP_SEI 0x2F
#define OP_SLO 0x3D
#define OP_SRE 0x3E
#define OP_STA 0x30
#define OP_STX 0x31
#define OP_STY 0x32
#define OP_TAX 0x33
#define OP_TAY 0x34
#define OP_TSX 0x35
#define OP_TXA 0x36
#define OP_TXS 0x37
#define OP_TYA 0x38

/*
  Op Codes Jump Table
  000000000000000
  ^^^^^^    ^^^ ^
  OpCode^^^^Tim^U
        AdMd   E

  AdMd: Addressing Mode
  Tim:  Execution Time - 1
  E:    Extra Time if Page Boundary Crossed
  U:    Unused
*/

static uint16_t JUMPTABLE[0x100] = {

   0b1011001011000,  0b100011101110100,                0b0,  0b111101101111100,  0b100010010101000,  0b100011010101000,      0b11010110000,  0b111101010110000,  0b100101001001000,  0b100011000100100,      0b11000000100,                0b0,  0b100010010001100,  0b100011010001100,      0b11010010100,  0b111101010010100, 
   0b1010001100110,  0b100011110010010,                0b0,  0b111101110011100,  0b100010100101100,  0b100011100101100,      0b11100110100,  0b111101100110100,    0b1110001000100,  0b100011100001110,  0b100010001000100,  0b111101100011000,  0b100010011101110,  0b100011011101110,      0b11011111000,  0b111101011111000, 
  0b11101010010100,      0b10101110100,                0b0,        0b101111100,     0b111010101000,      0b10010101000,  0b101000010110000,         0b10110000,  0b100111001001100,      0b10000100100,  0b101000000000100,                0b0,     0b111010001100,      0b10010001100,  0b101000010010100,         0b10010100, 
   0b1000001100110,      0b10110010010,                0b0,        0b110011100,  0b100010100101100,      0b10100101100,  0b101000100110100,        0b100110100,  0b101101001000100,      0b10100001110,  0b100010001000100,        0b100011000,  0b100010011101110,      0b10011101110,  0b101000011111000,         0b11111000, 
 0b101010001010100,   0b11000101110100,                0b0,  0b111110101111100,  0b100010010101000,   0b11000010101000,  0b100001010110000,  0b111110010110000,  0b100100001001000,   0b11000000100100,  0b100001000000100,                0b0,   0b11100010001000,   0b11000010001100,  0b100001010010100,  0b111110010010100, 
   0b1100001100110,   0b11000110010010,                0b0,  0b111110110011100,  0b100010100101100,   0b11000100101100,  0b100001100110100,  0b111110100110100,   0b10000001000100,   0b11000100001110,  0b100010001000100,  0b111110100011000,  0b100010011101110,   0b11000011101110,  0b100001011111000,  0b111110011111000, 
 0b101011001010100,       0b1101110100,                0b0,  0b111111101111100,  0b100010010101000,       0b1010101000,  0b101001010110000,  0b111111010110000,  0b100110001001100,       0b1000100100,  0b101001000000100,                0b0,   0b11100011010000,       0b1010001100,  0b101001010010100,  0b111111010010100, 
   0b1101001100110,       0b1110010010,                0b0,  0b111111110011100,  0b100010100101100,       0b1100101100,  0b101001100110100,  0b111111100110100,  0b101111001000100,       0b1100001110,  0b100010001000100,  0b111111100011000,  0b100010011101110,       0b1011101110,  0b101001011111000,  0b111111011111000, 
 0b100010000100100,  0b110000101110100,  0b100010000100100,  0b111010101110100,  0b110010010101000,  0b110000010101000,  0b110001010101000,  0b111010010101000,   0b10111001000100,  0b100010000100100,  0b110110001000100,                0b0,  0b110010010001100,  0b110000010001100,  0b110001010001100,  0b111010010001100, 
    0b100001100110,  0b110000110010100,                0b0,                0b0,  0b110010100101100,  0b110000100101100,  0b110001101001100,  0b111010101001100,  0b111000001000100,  0b110000100010000,  0b110111001000100,                0b0,                0b0,  0b110000011110000,                0b0,                0b0, 
 0b100000000100100,   0b11110101110100,   0b11111000100100,  0b111001101110100,  0b100000010101000,   0b11110010101000,   0b11111010101000,  0b111001010101000,  0b110100001000100,   0b11110000100100,  0b110011001000100,                0b0,  0b100000010001100,   0b11110010001100,   0b11111010001100,  0b111001010001100, 
    0b101001100110,   0b11110110010010,                0b0,  0b111001110010010,  0b100000100101100,   0b11110100101100,   0b11111101001100,  0b111001101001100,   0b10001001000100,   0b11110100001110,  0b110101001000100,                0b0,  0b100000011101110,   0b11110011101110,   0b11111100001110,  0b111001100001110, 
  0b10100000100100,   0b10010101110100,  0b100010000100100,  0b111011101111100,   0b10100010101000,   0b10010010101000,   0b10101010110000,  0b111011010110000,   0b11011001000100,   0b10010000100100,   0b10110001000100,                0b0,   0b10100010001100,   0b10010010001100,   0b10101010010100,  0b111011010010100, 
   0b1001001100110,   0b10010110010010,                0b0,  0b111011110011100,  0b100010100101100,   0b10010100101100,   0b10101100110100,  0b111011100110100,    0b1111001000100,   0b10010100001110,  0b100010001000100,  0b111011100011000,  0b100010011101110,   0b10010011101110,   0b10101011111000,  0b111011011111000, 
  0b10011000100100,  0b101100101110100,  0b100010000100100,  0b111100101111100,   0b10011010101000,  0b101100010101000,   0b11001010110000,  0b111100010110000,   0b11010001000100,  0b101100000100100,  0b100010001000100,  0b101100000100100,   0b10011010001100,  0b101100010001100,   0b11001010010100,  0b111100010010100, 
    0b110001100110,  0b101100110010010,                0b0,  0b111100110011100,  0b100010100101100,  0b101100100101100,   0b11001100110100,  0b111100100110100,  0b101110001000100,  0b101100100001110,  0b100010001000100,  0b111100100011000,  0b100010011101110,  0b101100011101110,   0b11001011111000,  0b111100011111000, 
};

/*
  Addressing Modes
  Source: http://www.emulator101.com/6502-addressing-modes.html
*/

// Non-Indexed, non memory
#define ADDRMODE_ACCUM	0x0
#define ADDRMODE_IMMED	0x1
#define ADDRMODE_IMPLD	0x2

// Non-Indexed memory ops
#define ADDRMODE_RELAT	0x3
#define ADDRMODE_ABSOL	0x4
#define ADDRMODE_ZRPAG	0x5
#define ADDRMODE_INDIR	0x6

// Indexed memory ops
#define ADDRMODE_ABSOX	0x7
#define ADDRMODE_ABSOY	0x8
#define ADDRMODE_ZRPAX	0x9
#define ADDRMODE_ZRPAY	0xA
#define ADDRMODE_INDIX	0xB
#define ADDRMODE_INDIY	0xC

#define FLAG_CARRY    0b1
#define FLAG_ZERO     0b10
#define FLAG_INTDIS   0b100
#define FLAG_DECIMAL  0b1000
#define FLAG_BREAK    0b10000
#define FLAG_RESERVED 0b100000
#define FLAG_OVERFLOW 0b1000000
#define FLAG_NEGATIVE 0b10000000

#define NMI_VECTOR  0xFFFA
#define RST_VECTOR  0xFFFC
#define BRK_VECTOR  0xFFFE

#endif
