use std::convert::TryFrom;

pub enum CPUVector {
    Nmi = 0xFFFA,
    Rst = 0xFFFC,
    Brk = 0xFFFE,
}

pub enum Flag {
    Carry = 0b1,
    Zero = 0b10,
    IntDis = 0b100,
    Decimal = 0b1000,
    Break = 0b10000,
    Reserved = 0b100000,
    Overflow = 0b1000000,
    Negative = 0b10000000,
}

#[repr(u8)]
#[derive(PartialEq)]
pub enum AddrMode {
    Accumulator = 0x0,
    Immediate = 0x1,
    Implied = 0x2,
    Relative = 0x3,
    Absolute = 0x4,
    ZeroPage = 0x5,
    Indirect = 0x6,
    AbsoluteX = 0x7,
    AbsoluteY = 0x8,
    ZeroPageX = 0x9,
    ZeroPageY = 0xA,
    IndirectX = 0xB,
    IndirectY = 0xC,
}

#[repr(u8)]
#[derive(PartialEq)]
pub enum OpCode {
    Adc = 0x1,
    And = 0x2,
    Asl = 0x3,
    Bcc = 0x4,
    Bcs = 0x5,
    Beq = 0x6,
    Bit = 0x7,
    Bmi = 0x8,
    Bne = 0x9,
    Bpl = 0xA,
    Brk = 0xB,
    Bvc = 0xC,
    Bvs = 0xD,
    Clc = 0xE,
    Cld = 0xF,
    Cli = 0x10,
    Clv = 0x11,
    Cmp = 0x12,
    Cpx = 0x13,
    Cpy = 0x14,
    Dcp = 0x3B,
    Dec = 0x15,
    Dex = 0x16,
    Dey = 0x17,
    Eor = 0x18,
    Inc = 0x19,
    Inx = 0x1A,
    Iny = 0x1B,
    Isc = 0x3C,
    Jmp = 0x1C,
    Jsr = 0x1D,
    Lax = 0x39,
    Lda = 0x1E,
    Ldx = 0x1F,
    Ldy = 0x20,
    Lsr = 0x21,
    Nop = 0x22,
    Ora = 0x23,
    Pha = 0x24,
    Php = 0x25,
    Pla = 0x26,
    Plp = 0x27,
    Rla = 0x0,
    Rol = 0x28,
    Ror = 0x29,
    Rra = 0x3F,
    Rti = 0x2A,
    Rts = 0x2B,
    Sax = 0x3A,
    Sbc = 0x2C,
    Sec = 0x2D,
    Sed = 0x2E,
    Sei = 0x2F,
    Slo = 0x3D,
    Sre = 0x3E,
    Sta = 0x30,
    Stx = 0x31,
    Sty = 0x32,
    Tax = 0x33,
    Tay = 0x34,
    Tsx = 0x35,
    Txa = 0x36,
    Txs = 0x37,
    Tya = 0x38,
}

pub const TRANSLATION_TABLE: [u16; 256] = [
    0b101100101100,
    0b10001110111010,
    0b0,
    0b11110110111110,
    0b10001001010100,
    0b10001101010100,
    0b1101011000,
    0b11110101011000,
    0b10010100100100,
    0b10001100010010,
    0b1100000010,
    0b0,
    0b10001001000110,
    0b10001101000110,
    0b1101001010,
    0b11110101001010,
    0b101000110011,
    0b10001111001001,
    0b0,
    0b11110111001110,
    0b10001010010110,
    0b10001110010110,
    0b1110011010,
    0b11110110011010,
    0b111000100010,
    0b10001110000111,
    0b10001000100010,
    0b11110110001100,
    0b10001001110111,
    0b10001101110111,
    0b1101111100,
    0b11110101111100,
    0b1110101001010,
    0b1010111010,
    0b0,
    0b10111110,
    0b11101010100,
    0b1001010100,
    0b10100001011000,
    0b1011000,
    0b10011100100110,
    0b1000010010,
    0b10100000000010,
    0b0,
    0b11101000110,
    0b1001000110,
    0b10100001001010,
    0b1001010,
    0b100000110011,
    0b1011001001,
    0b0,
    0b11001110,
    0b10001010010110,
    0b1010010110,
    0b10100010011010,
    0b10011010,
    0b10110100100010,
    0b1010000111,
    0b10001000100010,
    0b10001100,
    0b10001001110111,
    0b1001110111,
    0b10100001111100,
    0b1111100,
    0b10101000101010,
    0b1100010111010,
    0b0,
    0b11111010111110,
    0b10001001010100,
    0b1100001010100,
    0b10000101011000,
    0b11111001011000,
    0b10010000100100,
    0b1100000010010,
    0b10000100000010,
    0b0,
    0b1110001000100,
    0b1100001000110,
    0b10000101001010,
    0b11111001001010,
    0b110000110011,
    0b1100011001001,
    0b0,
    0b11111011001110,
    0b10001010010110,
    0b1100010010110,
    0b10000110011010,
    0b11111010011010,
    0b1000000100010,
    0b1100010000111,
    0b10001000100010,
    0b11111010001100,
    0b10001001110111,
    0b1100001110111,
    0b10000101111100,
    0b11111001111100,
    0b10101100101010,
    0b110111010,
    0b0,
    0b11111110111110,
    0b10001001010100,
    0b101010100,
    0b10100101011000,
    0b11111101011000,
    0b10011000100110,
    0b100010010,
    0b10100100000010,
    0b0,
    0b1110001101000,
    0b101000110,
    0b10100101001010,
    0b11111101001010,
    0b110100110011,
    0b111001001,
    0b0,
    0b11111111001110,
    0b10001010010110,
    0b110010110,
    0b10100110011010,
    0b11111110011010,
    0b10111100100010,
    0b110000111,
    0b10001000100010,
    0b11111110001100,
    0b10001001110111,
    0b101110111,
    0b10100101111100,
    0b11111101111100,
    0b10001000010010,
    0b11000010111010,
    0b10001000010010,
    0b11101010111010,
    0b11001001010100,
    0b11000001010100,
    0b11000101010100,
    0b11101001010100,
    0b1011100100010,
    0b10001000010010,
    0b11011000100010,
    0b0,
    0b11001001000110,
    0b11000001000110,
    0b11000101000110,
    0b11101001000110,
    0b10000110011,
    0b11000011001010,
    0b0,
    0b0,
    0b11001010010110,
    0b11000010010110,
    0b11000110100110,
    0b11101010100110,
    0b11100000100010,
    0b11000010001000,
    0b11011100100010,
    0b0,
    0b0,
    0b11000001111000,
    0b0,
    0b0,
    0b10000000010010,
    0b1111010111010,
    0b1111100010010,
    0b11100110111010,
    0b10000001010100,
    0b1111001010100,
    0b1111101010100,
    0b11100101010100,
    0b11010000100010,
    0b1111000010010,
    0b11001100100010,
    0b0,
    0b10000001000110,
    0b1111001000110,
    0b1111101000110,
    0b11100101000110,
    0b10100110011,
    0b1111011001001,
    0b0,
    0b11100111001001,
    0b10000010010110,
    0b1111010010110,
    0b1111110100110,
    0b11100110100110,
    0b1000100100010,
    0b1111010000111,
    0b11010100100010,
    0b0,
    0b10000001110111,
    0b1111001110111,
    0b1111110000111,
    0b11100110000111,
    0b1010000010010,
    0b1001010111010,
    0b10001000010010,
    0b11101110111110,
    0b1010001010100,
    0b1001001010100,
    0b1010101011000,
    0b11101101011000,
    0b1101100100010,
    0b1001000010010,
    0b1011000100010,
    0b0,
    0b1010001000110,
    0b1001001000110,
    0b1010101001010,
    0b11101101001010,
    0b100100110011,
    0b1001011001001,
    0b0,
    0b11101111001110,
    0b10001010010110,
    0b1001010010110,
    0b1010110011010,
    0b11101110011010,
    0b111100100010,
    0b1001010000111,
    0b10001000100010,
    0b11101110001100,
    0b10001001110111,
    0b1001001110111,
    0b1010101111100,
    0b11101101111100,
    0b1001100010010,
    0b10110010111010,
    0b10001000010010,
    0b11110010111110,
    0b1001101010100,
    0b10110001010100,
    0b1100101011000,
    0b11110001011000,
    0b1101000100010,
    0b10110000010010,
    0b10001000100010,
    0b10110000010010,
    0b1001101000110,
    0b10110001000110,
    0b1100101001010,
    0b11110001001010,
    0b11000110011,
    0b10110011001001,
    0b0,
    0b11110011001110,
    0b10001010010110,
    0b10110010010110,
    0b1100110011010,
    0b11110010011010,
    0b10111000100010,
    0b10110010000111,
    0b10001000100010,
    0b11110010001100,
    0b10001001110111,
    0b10110001110111,
    0b1100101111100,
    0b11110001111100,
];

impl TryFrom<u8> for AddrMode {
    type Error = ();

    fn try_from(value: u8) -> Result<Self, Self::Error> {
        match value {
            0 => Ok(Self::Accumulator),
            1 => Ok(Self::Immediate),
            2 => Ok(Self::Implied),
            3 => Ok(Self::Relative),
            4 => Ok(Self::Absolute),
            5 => Ok(Self::ZeroPage),
            6 => Ok(Self::Indirect),
            7 => Ok(Self::AbsoluteX),
            8 => Ok(Self::AbsoluteY),
            9 => Ok(Self::ZeroPageX),
            10 => Ok(Self::ZeroPageY),
            11 => Ok(Self::IndirectX),
            12 => Ok(Self::IndirectY),
            _ => Err(()),
        }
    }
}

impl TryFrom<u8> for OpCode {
    type Error = ();

    fn try_from(value: u8) -> Result<Self, Self::Error> {
        match value {
            0 => Ok(Self::Rla),
            1 => Ok(Self::Adc),
            2 => Ok(Self::And),
            3 => Ok(Self::Asl),
            4 => Ok(Self::Bcc),
            5 => Ok(Self::Bcs),
            6 => Ok(Self::Beq),
            7 => Ok(Self::Bit),
            8 => Ok(Self::Bmi),
            9 => Ok(Self::Bne),
            10 => Ok(Self::Bpl),
            11 => Ok(Self::Brk),
            12 => Ok(Self::Bvc),
            13 => Ok(Self::Bvs),
            14 => Ok(Self::Clc),
            15 => Ok(Self::Cld),
            16 => Ok(Self::Cli),
            17 => Ok(Self::Clv),
            18 => Ok(Self::Cmp),
            19 => Ok(Self::Cpx),
            20 => Ok(Self::Cpy),
            21 => Ok(Self::Dec),
            22 => Ok(Self::Dex),
            23 => Ok(Self::Dey),
            24 => Ok(Self::Eor),
            25 => Ok(Self::Inc),
            26 => Ok(Self::Inx),
            27 => Ok(Self::Iny),
            28 => Ok(Self::Jmp),
            29 => Ok(Self::Jsr),
            30 => Ok(Self::Lda),
            31 => Ok(Self::Ldx),
            32 => Ok(Self::Ldy),
            33 => Ok(Self::Lsr),
            34 => Ok(Self::Nop),
            35 => Ok(Self::Ora),
            36 => Ok(Self::Pha),
            37 => Ok(Self::Php),
            38 => Ok(Self::Pla),
            39 => Ok(Self::Plp),
            40 => Ok(Self::Rol),
            41 => Ok(Self::Ror),
            42 => Ok(Self::Rti),
            43 => Ok(Self::Rts),
            44 => Ok(Self::Sbc),
            45 => Ok(Self::Sec),
            46 => Ok(Self::Sed),
            47 => Ok(Self::Sei),
            48 => Ok(Self::Sta),
            49 => Ok(Self::Stx),
            50 => Ok(Self::Sty),
            51 => Ok(Self::Tax),
            52 => Ok(Self::Tay),
            53 => Ok(Self::Tsx),
            54 => Ok(Self::Txa),
            55 => Ok(Self::Txs),
            56 => Ok(Self::Tya),
            57 => Ok(Self::Lax),
            58 => Ok(Self::Sax),
            59 => Ok(Self::Dcp),
            60 => Ok(Self::Isc),
            61 => Ok(Self::Slo),
            62 => Ok(Self::Sre),
            63 => Ok(Self::Rra),
            _ => Err(()),
        }
    }
}
