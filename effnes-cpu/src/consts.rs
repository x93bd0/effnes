use std::convert::TryFrom;

/// CPU interrupt vectors.
pub enum CPUVector {
    /// Non-Maskable Interrupt
    Nmi = 0xFFFA,
    /// Reset
    Rst = 0xFFFC,
    /// Break
    Brk = 0xFFFE,
}

/// CPU flags.
pub enum Flag {
    Carry = 0b1,
    Zero = 0b10,
    IntDis = 0b100,
    Decimal = 0b1000,
    Break = 0b10000,
    Reserved = 0b100000,
    Overflow = 0b1000000,
    Negative = 0b10000000,
}

#[repr(u8)]
#[derive(PartialEq)]
pub enum AddrMode {
    Absolute = 0x4,
    AbsoluteX = 0x7,
    AbsoluteY = 0x8,
    Accumulator = 0x0,
    Immediate = 0x1,
    Implied = 0x2,
    Indirect = 0x6,
    IndirectX = 0xb,
    IndirectY = 0xc,
    Relative = 0x3,
    ZeroPage = 0x5,
    ZeroPageX = 0x9,
    ZeroPageY = 0xa,
}

#[repr(u8)]
pub enum OpCode {
    Adc = 0x0,
    An1 = 0x39,
    An2 = 0x3a,
    And = 0x1,
    Ane = 0x3b,
    Arr = 0x3c,
    Asl = 0x2,
    Asr = 0x38,
    Bcc = 0x8,
    Bcs = 0x9,
    Beq = 0xb,
    Bit = 0x3,
    Bmi = 0x5,
    Bne = 0xa,
    Bpl = 0x4,
    Brk = 0xc,
    Bvc = 0x6,
    Bvs = 0x7,
    Clc = 0x12,
    Cld = 0x17,
    Cli = 0x14,
    Clv = 0x16,
    Cmp = 0xd,
    Cpx = 0xe,
    Cpy = 0xf,
    Dcp = 0x3d,
    Dec = 0x10,
    Dex = 0x24,
    Dey = 0x28,
    Eor = 0x11,
    Inc = 0x19,
    Inx = 0x25,
    Iny = 0x29,
    Isc = 0x3e,
    Jam = 0x4b,
    Jmp = 0x1a,
    Jsr = 0x1b,
    Las = 0x3f,
    Lax = 0x40,
    Lda = 0x1c,
    Ldx = 0x1d,
    Ldy = 0x1e,
    Lsr = 0x1f,
    Nop = 0x20,
    Ora = 0x21,
    Pha = 0x32,
    Php = 0x34,
    Pla = 0x33,
    Plp = 0x35,
    Rla = 0x41,
    Rol = 0x2a,
    Ror = 0x2b,
    Rra = 0x42,
    Rti = 0x2c,
    Rts = 0x2d,
    Sax = 0x43,
    Sbc = 0x2e,
    Sbx = 0x44,
    Sec = 0x13,
    Sed = 0x18,
    Sei = 0x15,
    Sha = 0x45,
    Shx = 0x46,
    Shy = 0x47,
    Slo = 0x48,
    Sre = 0x49,
    Sta = 0x2f,
    Stx = 0x36,
    Sty = 0x37,
    Tas = 0x4a,
    Tax = 0x22,
    Tay = 0x26,
    Tsx = 0x31,
    Txa = 0x23,
    Txs = 0x30,
    Tya = 0x27,
}

pub const TRANSLATION_TABLE: [u16; 256] = [
    0b110000101100,
    0b10000110111010,
    0b100101100010000,
    0b100100010111110,
    0b10000001010100,
    0b10000101010100,
    0b1001011000,
    0b100100001011000,
    0b11010000100100,
    0b10000100010010,
    0b1000000010,
    0b11100100010010,
    0b10000001000110,
    0b10000101000110,
    0b1001001010,
    0b100100001001010,
    0b10000110011,
    0b10000111001001,
    0b100101100010000,
    0b100100011001110,
    0b10000010010110,
    0b10000110010110,
    0b1010011010,
    0b100100010011010,
    0b1001000100010,
    0b10000110000111,
    0b10000000100010,
    0b100100010001100,
    0b10000001110111,
    0b10000101110111,
    0b1001111100,
    0b100100001111100,
    0b1101101001010,
    0b110111010,
    0b100101100010000,
    0b100000110111110,
    0b1101010100,
    0b101010100,
    0b10101001011000,
    0b100000101011000,
    0b11010100100110,
    0b100010010,
    0b10101000000010,
    0b11101000010010,
    0b1101000110,
    0b101000110,
    0b10101001001010,
    0b100000101001010,
    0b10100110011,
    0b111001001,
    0b100101100010000,
    0b100000111001110,
    0b10000010010110,
    0b110010110,
    0b10101010011010,
    0b100000110011010,
    0b1001100100010,
    0b110000111,
    0b10000000100010,
    0b100000110001100,
    0b10000001110111,
    0b101110111,
    0b10101001111100,
    0b100000101111100,
    0b10110000101010,
    0b1000110111010,
    0b100101100010000,
    0b100100110111110,
    0b10000001010100,
    0b1000101010100,
    0b1111101011000,
    0b100100101011000,
    0b11001000100100,
    0b1000100010010,
    0b1111100000010,
    0b11100000010010,
    0b1101001000100,
    0b1000101000110,
    0b1111101001010,
    0b100100101001010,
    0b11000110011,
    0b1000111001001,
    0b100101100010000,
    0b100100111001110,
    0b10000010010110,
    0b1000110010110,
    0b1111110011010,
    0b100100110011010,
    0b1010000100010,
    0b1000110000111,
    0b10000000100010,
    0b100100110001100,
    0b10000001110111,
    0b1000101110111,
    0b1111101111100,
    0b100100101111100,
    0b10110100101010,
    0b10111010,
    0b100101100010000,
    0b100001010111110,
    0b10000001010100,
    0b1010100,
    0b10101101011000,
    0b100001001011000,
    0b11001100100110,
    0b10010,
    0b10101100000010,
    0b11110000010010,
    0b1101001101000,
    0b1000110,
    0b10101101001010,
    0b100001001001010,
    0b11100110011,
    0b11001001,
    0b100101100010000,
    0b100001011001110,
    0b10000010010110,
    0b10010110,
    0b10101110011010,
    0b100001010011010,
    0b1010100100010,
    0b10000111,
    0b10000000100010,
    0b100001010001100,
    0b10000001110111,
    0b1110111,
    0b10101101111100,
    0b100001001111100,
    0b10000000010010,
    0b10111110111010,
    0b10000000010010,
    0b100001110111010,
    0b11011101010100,
    0b10111101010100,
    0b11011001010100,
    0b100001101010100,
    0b10100000100010,
    0b10000000010010,
    0b10001100100010,
    0b11101100010010,
    0b11011101000110,
    0b10111101000110,
    0b11011001000110,
    0b100001101000110,
    0b100000110011,
    0b10111111001010,
    0b100101100010000,
    0b100010111001010,
    0b11011110010110,
    0b10111110010110,
    0b11011010100110,
    0b100001110100110,
    0b10011100100010,
    0b10111110001000,
    0b11000000100010,
    0b100101010001000,
    0b100011101111000,
    0b10111101111000,
    0b100011010001000,
    0b100010110001000,
    0b1111000010010,
    0b1110010111010,
    0b1110100010010,
    0b100000010111010,
    0b1111001010100,
    0b1110001010100,
    0b1110101010100,
    0b100000001010100,
    0b10011000100010,
    0b1110000010010,
    0b10001000100010,
    0b100000000010010,
    0b1111001000110,
    0b1110001000110,
    0b1110101000110,
    0b100000001000110,
    0b100100110011,
    0b1110011001001,
    0b100101100010000,
    0b100000011001001,
    0b1111010010110,
    0b1110010010110,
    0b1110110100110,
    0b100000010100110,
    0b1011000100010,
    0b1110010000111,
    0b11000100100010,
    0b11111110000111,
    0b1111001110111,
    0b1110001110111,
    0b1110110000111,
    0b100000010000111,
    0b111100010010,
    0b110110111010,
    0b10000000010010,
    0b11110110111110,
    0b111101010100,
    0b110101010100,
    0b1000001011000,
    0b11110101011000,
    0b10100100100010,
    0b110100010010,
    0b10010000100010,
    0b100010000010010,
    0b111101000110,
    0b110101000110,
    0b1000001001010,
    0b11110101001010,
    0b101000110011,
    0b110111001001,
    0b100101100010000,
    0b11110111001110,
    0b10000010010110,
    0b110110010110,
    0b1000010011010,
    0b11110110011010,
    0b1011100100010,
    0b110110000111,
    0b10000000100010,
    0b11110110001100,
    0b10000001110111,
    0b110101110111,
    0b1000001111100,
    0b11110101111100,
    0b111000010010,
    0b10111010111010,
    0b10000000010010,
    0b11111010111110,
    0b111001010100,
    0b10111001010100,
    0b1100101011000,
    0b11111001011000,
    0b10010100100010,
    0b10111000010010,
    0b10000000100010,
    0b10111000010010,
    0b111001000110,
    0b10111001000110,
    0b1100101001010,
    0b11111001001010,
    0b101100110011,
    0b10111011001001,
    0b100101100010000,
    0b11111011001110,
    0b10000010010110,
    0b10111010010110,
    0b1100110011010,
    0b11111010011010,
    0b1100000100010,
    0b10111010000111,
    0b10000000100010,
    0b11111010001100,
    0b10000001110111,
    0b10111001110111,
    0b1100101111100,
    0b11111001111100,
];

impl TryFrom<u8> for AddrMode {
    type Error = ();

    fn try_from(value: u8) -> Result<Self, Self::Error> {
       match value {
            4 => Ok(Self::Absolute),
            7 => Ok(Self::AbsoluteX),
            8 => Ok(Self::AbsoluteY),
            0 => Ok(Self::Accumulator),
            1 => Ok(Self::Immediate),
            2 => Ok(Self::Implied),
            6 => Ok(Self::Indirect),
            11 => Ok(Self::IndirectX),
            12 => Ok(Self::IndirectY),
            3 => Ok(Self::Relative),
            5 => Ok(Self::ZeroPage),
            9 => Ok(Self::ZeroPageX),
            10 => Ok(Self::ZeroPageY),
            _ => Err(()),
       }
    }
}


impl TryFrom<u8> for OpCode {
    type Error = ();

    fn try_from(value: u8) -> Result<Self, Self::Error> {
        match value {
            0 => Ok(Self::Adc),
            57 => Ok(Self::An1),
            58 => Ok(Self::An2),
            1 => Ok(Self::And),
            59 => Ok(Self::Ane),
            60 => Ok(Self::Arr),
            2 => Ok(Self::Asl),
            56 => Ok(Self::Asr),
            8 => Ok(Self::Bcc),
            9 => Ok(Self::Bcs),
            11 => Ok(Self::Beq),
            3 => Ok(Self::Bit),
            5 => Ok(Self::Bmi),
            10 => Ok(Self::Bne),
            4 => Ok(Self::Bpl),
            12 => Ok(Self::Brk),
            6 => Ok(Self::Bvc),
            7 => Ok(Self::Bvs),
            18 => Ok(Self::Clc),
            23 => Ok(Self::Cld),
            20 => Ok(Self::Cli),
            22 => Ok(Self::Clv),
            13 => Ok(Self::Cmp),
            14 => Ok(Self::Cpx),
            15 => Ok(Self::Cpy),
            61 => Ok(Self::Dcp),
            16 => Ok(Self::Dec),
            36 => Ok(Self::Dex),
            40 => Ok(Self::Dey),
            17 => Ok(Self::Eor),
            25 => Ok(Self::Inc),
            37 => Ok(Self::Inx),
            41 => Ok(Self::Iny),
            62 => Ok(Self::Isc),
            75 => Ok(Self::Jam),
            26 => Ok(Self::Jmp),
            27 => Ok(Self::Jsr),
            63 => Ok(Self::Las),
            64 => Ok(Self::Lax),
            28 => Ok(Self::Lda),
            29 => Ok(Self::Ldx),
            30 => Ok(Self::Ldy),
            31 => Ok(Self::Lsr),
            32 => Ok(Self::Nop),
            33 => Ok(Self::Ora),
            50 => Ok(Self::Pha),
            52 => Ok(Self::Php),
            51 => Ok(Self::Pla),
            53 => Ok(Self::Plp),
            65 => Ok(Self::Rla),
            42 => Ok(Self::Rol),
            43 => Ok(Self::Ror),
            66 => Ok(Self::Rra),
            44 => Ok(Self::Rti),
            45 => Ok(Self::Rts),
            67 => Ok(Self::Sax),
            46 => Ok(Self::Sbc),
            68 => Ok(Self::Sbx),
            19 => Ok(Self::Sec),
            24 => Ok(Self::Sed),
            21 => Ok(Self::Sei),
            69 => Ok(Self::Sha),
            70 => Ok(Self::Shx),
            71 => Ok(Self::Shy),
            72 => Ok(Self::Slo),
            73 => Ok(Self::Sre),
            47 => Ok(Self::Sta),
            54 => Ok(Self::Stx),
            55 => Ok(Self::Sty),
            74 => Ok(Self::Tas),
            34 => Ok(Self::Tax),
            38 => Ok(Self::Tay),
            49 => Ok(Self::Tsx),
            35 => Ok(Self::Txa),
            48 => Ok(Self::Txs),
            39 => Ok(Self::Tya),
            _ => Err(()),
        }
    }
}

pub const MNEMONICS_TABLE: [&str; 76] = [
    "ADC",
    "AND",
    "ASL",
    "BIT",
    "BPL",
    "BMI",
    "BVC",
    "BVS",
    "BCC",
    "BCS",
    "BNE",
    "BEQ",
    "BRK",
    "CMP",
    "CPX",
    "CPY",
    "DEC",
    "EOR",
    "CLC",
    "SEC",
    "CLI",
    "SEI",
    "CLV",
    "CLD",
    "SED",
    "INC",
    "JMP",
    "JSR",
    "LDA",
    "LDX",
    "LDY",
    "LSR",
    "NOP",
    "ORA",
    "TAX",
    "TXA",
    "DEX",
    "INX",
    "TAY",
    "TYA",
    "DEY",
    "INY",
    "ROL",
    "ROR",
    "RTI",
    "RTS",
    "SBC",
    "STA",
    "TXS",
    "TSX",
    "PHA",
    "PLA",
    "PHP",
    "PLP",
    "STX",
    "STY",
    "ASR",
    "AN1",
    "AN2",
    "ANE",
    "ARR",
    "DCP",
    "ISC",
    "LAS",
    "LAX",
    "RLA",
    "RRA",
    "SAX",
    "SBX",
    "SHA",
    "SHX",
    "SHY",
    "SLO",
    "SRE",
    "TAS",
    "JAM",
];
